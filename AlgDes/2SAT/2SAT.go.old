package main 

import (
	"fmt"
	"UJSPackage/file"
)

type variable struct {
	index			int
	value			bool
	locked			bool
	// consSide matches up with constraints. Each bool in slice is 
	// true if the matching constraint is on the right and false
	// if that constraint is on lthe left
	consSide		[]bool
	constraints		[]*constraint
}

type constraint struct {
	leftVal			bool
	leftPoint		*variable
	leftUnsat		bool
	rightVal		bool
	rightPoint		*variable
	rightUnsat		bool
}

type TwoSAT struct {
	constraints		[]constraint
	variables		[]variable
}

var fileTokens = []string{"D:\\James\\Temp\\2sattest1.txt",}/*
							"D:\\James\\Temp\\2sattest2.txt",
							"D:\\James\\Temp\\2sattest3.txt",
							"D:\\James\\Temp\\2sattest4.txt",
							"D:\\James\\Temp\\2sattest5.txt",
							"D:\\James\\Temp\\2sattest6.txt",}*/

func main() {
	problems 	:= make([]TwoSAT, len(fileTokens))
	results		:= make([]bool, len(fileTokens))
	//read problem from file
	for i, v := range fileTokens {
		fmt.Println("Reading problem #", i + 1)
		problems[i] = readProblem(v)
	}
	//run 2SAT problem
	for i, v := range problems {
		fmt.Println("Solving problem #", i + 1)
		results[i] = backSAT(v)
	}
	//output results
	fmt.Println("Done...")
	fmt.Println(results)
}

//!!!
func backSAT(problem TwoSAT) bool {
	fmt.Println(problem.variables)
	fmt.Println()
	solved	:= false

	solved = backRec(problem, 0)
	if !solved {
		solved = backRec(problem, 0)
	}
	return solved
}

func backRec(problem TwoSAT, index int) bool {
	fmt.Println(problem.variables)
	fmt.Println()
	solved			:= false
	this			:= &problem.variables[index]
	this.locked		=  true
	this.value		=  !this.value

	unsat 			:=  findUnsatisfied(this.constraints, 0)

	if unsat < len(this.constraints) {
		if !this.constraints[unsat].leftPoint.locked {
			solved = backRec(problem, this.constraints[unsat].leftPoint.index)
		}
		if !solved && !this.constraints[unsat].rightPoint.locked {
			solved = backRec(problem, this.constraints[unsat].rightPoint.index)
		}
		if !solved {
			this.locked = false
			return solved
		}
	}

	if !solved {
		this.locked = false
	}
	fmt.Println(problem.variables)
	return solved
}

func findUnlocked(variables []variable, count int) int {
	if len(variables) == 0 {
		return 100
	} else {
		if !variables[0].locked {
			return 0
		} else {
			return 1 + findUnlocked(variables[1:], count + 1)
		}

	}
}

func findUnsatisfied(constraints []*constraint, count int) int {
	if count >= len(constraints) {
		return count
	} else {
		if !satisfied(*constraints[count]) {
			return count
		} else {
			return findUnsatisfied(constraints, count + 1)
		}
	}
}

func findUnsatisfiedTwo(constraints []constraint, count int) int {
	if count >= len(constraints) {
		return count
	} else {
		if !satisfied(constraints[count]) {
			return count
		} else {
			return findUnsatisfiedTwo(constraints, count + 1)
		}
	}
}

func satisfied(cons constraint) bool {
	return cons.leftVal == cons.leftPoint.value || cons.rightVal == cons.rightPoint.value
}

func readProblem(fileName string) TwoSAT {
	intLines 	:= file.IntLines(fileName)
	counts		:= intLines[0][0]
	intLines 	=  intLines[1:]
	constraints	:= make([]constraint, counts)
	variables	:= make([]variable, counts)

	for i, v := range intLines {
		
		//create the associated constraint
		if v[0] > 0 {
			constraints[i].leftVal = true
		}
		constraints[i].leftPoint = &variables[abs(v[0])-1]
		if v[1] > 0 {
			constraints[i].rightVal = true
		}
		constraints[i].rightPoint = &(variables[abs(v[1])-1])

		//add the constraint to the set of pointers for its associated variables
		variables[abs(v[0])-1].constraints = 
						append(variables[abs(v[0])-1].constraints, &constraints[i])
		variables[abs(v[0])-1].consSide = 
						append(variables[abs(v[0])-1].consSide, false)
		variables[abs(v[1])-1].constraints = 
						append(variables[abs(v[1])-1].constraints, &constraints[i])
		variables[abs(v[1])-1].consSide = 
						append(variables[abs(v[1])-1].consSide, true)

		//just set the index for the variables for bookkeeping
		variables[i].index = i

	}
	return TwoSAT{constraints: constraints, variables: variables}
}

func abs(n int) int {
	if n < 0 {
		return -n
	} else {
		return n
	}
}